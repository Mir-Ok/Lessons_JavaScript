Асинхронные функции - те, от которых мы не ждем результат сразу

В зависимости от сложности и динамичности сайта есть два варианта:
- генерация готового html-кода на самом сервере
- создание DOM-дерева на клиенте при помощи JavaScript

Откуда получить то, чего в коде нет? Курс валют, список товаров и пр.
Например, мы создаем магазин.
Попробуем обратится к серверу и скачать из него данные для магазина.

В сети есть липовые серверы, откуда можно стянуть данные
Например, https://gorest.co.in/
Предоставляет API для получения товаров, клиентов, например
https://gorest.co.in/public/v2/users

Браузер не позволит посылать какие попало запросы.
Например, из консоли Яндекса нельзя обратиться к Гуглу. есть ограничения.

Чтобы ограничения обойти, на стороне сервера можно установить специальные
заголовки ответа, которое покажут браузеру, что сервер безопасен
CORS - доступ к ресурсу между разными источниками
Подробнее 

Используемый нами сервис на каждый запрос вернет такие заголовки

---------------------------------
Откроем консоль браузера и при помощи функции fetch() отправим запрос

fetch('https://gorest.co.in/public/v2/users')

Откроем вкладку Network (Сеть) и в ней увидим тот самый файл users,
щелкнем на него, увидим вкладки Заголовки, Предварительный просмотр.
В подавляющем большинстве случаев мы от сервера получаем данные в формате xml, yaml, 
json (javascript object notation, в нем используются только двойные кавычки,
https://ru.wikipedia.org/wiki/JSON)

Если адрес вбить прямо, а не отправить по неему запрос, мы получим простыню сплошного
текста.
Во вкладке Сеть наоборот все красиво разобрано, и даже есть интерфейс для изучения.

----------------------------------

Попробуем из программы отправить запрос на сервер (дополнить список товаров) и получить ответ.
Первый параметр - адрес куда слать, второй - свойства передаваемого объекта.
Новые параметры, со старыми не примет!

fetch('https://gorest.co.in/public/v2/users', {
    // метод для создания нового товара
    method: 'POST',
    // все параметры собираем в словарь и переводим в строку
    body: JSON.stringify({
        email: "ahluwalia_harinakshi@treutel.net",
        gender: "female",
        id: 2256,
        name: "Harinakshi Ahluwalia",
        status: "active",
    }),
    // в заголовках токен и формат содержимого body 
    headers: {
        Authorization: 'Bearer 586e7da33d6716bee7addc1f0c5eb13219487dc30a5ddbde67fd4be65dd2ce8b',
        'Content-Type': 'application/json'
    }
})

Возвращается Promise, рассмотрим позже.

Откроем вкладку Сеть, найдем свой запрос в столбце слева, и справа посмотрим по вкладкам,
например, Полезная нагрузка. Увидим все его параметры.
Если id не было, он присвоится. По нему можно найти наш объект новый на сервере 

Запустим в консоли код fetch('https://gorest.co.in/public/v2/users/2256')
Получим в ответ то, что недавно сами отправили

Чтобы удалить созданный элемент:

fetch('https://gorest.co.in/public/v2/users/2256', {
    method: 'DELETE',
    headers: {
        Authorization: 'Bearer 586e7da33d6716bee7addc1f0c5eb13219487dc30a5ddbde67fd4be65dd2ce8b'
        }
    })

-----------------------------------------

Чтобы обрабатывать данные, полученные от сервера, ответ сервера надо поместить в переменную

let result = fetch('https://gorest.co.in/public/v2/users/2256')

При запуске этого кода приходит ответ Promise.

Функция fetch асинхронная, т.е. после ее выполнения скрипт продолжит выполнение, 
не дожидаясь полного ответа сервера. Это экономит время.
Как нам быть с ожиданием ответа?

Любой код, который выполняется асинхронно (напр. fetch()) должне быть помещен в
функцию с модификатором async.
Внутри них мы получаем возможность использовать ключевое слово await.
Это якорь, который стопорит выполнение кода в этом месте, пока не придет ответ от сервера
дальше ничего не происходит

async function loadProducts() {
    // отправили асинхроннный запрос, сели ждать ответ 
    const responce = await fetch('https://gorest.co.in/public/v2/users/2256');
    // получим тело ответа из общего ответа
    const data = await responce.json();
    
    console.log(data)
}
loadProducts(); // получили все словари с пользователями

Причем есть возможность просто вызвать адже асинхронную функцию со словом await

await loadProducts(); // в ответе не будет Promise



