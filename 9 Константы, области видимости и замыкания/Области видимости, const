Подробнее https://habr.com/ru/post/517338/

Казалось бы, переменную или функцию можно использовать сразу после ее объявления. 
Но не так все просто.

Каждое объявление помещает сущность в область видимости, из нее они доступны в данном месте кода.
По имени мы можем обратиться к области и использовать / изменить сущность

Например:
console.log(someVar);  // Ошибка! обращение в не объявленной переменной

let someVar = 10;
function someFunctions() {}

console.log(someVar);  // 10
someFunctions();       // нет ошибки

Переменная let имеет блочную область видимости (локальная, по сути), ее область видимости ограничена 
фигурными скобками, в которой она объявлена (во вложенных тоже).
За пределами к ней не обратится.
Причем если одно и то же название объявить в блоке, который вложен в блок с такой же переменной,
то их станет две, хотя и с одним названием.

Блочная область видимости

------------------------

const - при обяъвлении сразу надо присвоить значение и дальше его нельзя изменить.
В остальном аналогична let 

Когда применять?
1. неизменяемые величины, коэффициенты.
   фора записи const = EARTH_FALL_ACCELERATION = 9,78 (upper snake case)
2. для значений, которые мы не хотим случайно изменить  
   for (consr item of items) {
   console.log(item
   }

Вообще это хорошая пратктика приучить себя к const

--------------------------------------------------------------------------
Отдельно рассмотрим константы, в которые записаны значения ссылочных типов

const me = {name: 'Oksa'}

Мы можем свободно изменять то, что находится внутри объекта, потому что он ссылочный.
me.name = 'Oksana'
me.surname = 'Mir'

Но мы не можем присвоить в эту константу другой ссылочный объект оператором присваивания
Потому что константа хранит ссылку на сам объект, она не может меняться, 
в то время как ссылки внутри объекта может поменяться
