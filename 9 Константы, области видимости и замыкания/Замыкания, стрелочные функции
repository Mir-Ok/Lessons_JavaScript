Стрелочные https://learn.javascript.ru/arrow-functions-basics
Замыкания https://learn.javascript.ru/closure

Все именованные сущности имеют свои области видимости, блок и функция создают свои блоки.
Все переменные доступны в текущей или родительской области видимости.

Замыкание (closure) - функция, которая имеет доступ к именам из родительской области видимости.
В JS это по умолчанию, но в PHP для этого надо явно указывать, что из глобалки можно брать
конкретной функции, через use? замыкание создаются явно

Как это выглядит в JS

let name = 'Ivan';

function closureGreet() {
console.log(name);
}

closureGreet(); // Ivan

Если изменим значение, то внутри функции тоже изменится

-------------------------------------------------------

Стрелочные функции

До этого мы объявляли при помощи ключевого слова function или через помещение в переменную.
Есть еще один способ =>, но свойства несколько отличаются. Нет именования, нет пространства this (берет
переменные из глобальной области видимости).
Классическая функция оперирует своими внутренними переменными через this/ 
И только если внутренних нет, то будет обращаться к глобальной ОВ

// Синтаксис (аргументы) => {тело функции}

const arrowFn = (name, surname) => {
console.log(name + ' ' + surname);
}
arrowFn('Иван','Иванов')  // Иван Иванов

// если аргумент один, скобки можно опустить

const arrowFn = name => {
console.log(name);
}
arrowFn('Иван')  // Иван 

// если аргументов вообще нет, то ()
const arrowFn = () => {
console.log('Иван');
}
arrowFn()  // Иван 

--------------------
Если опустить фигурные скобки, то функция вернет результат, словно это return

const arrowFn = (name, surname) => `Привет, ${name} ${surname}`;
arrowFn('Иван','Иванов')  // 'Привет, Иван Иванов'

Это равнозначно записи ниже

const arrowFn = (name, surname) => {
  return `Привет, ${name} ${surname}`;
};
arrowFn('Иван','Иванов')

---------------------

Стрелочная функция может иметь одну инструкцию и мы хотим, чтобы она вернула объект

const arrowFn = (name, surname) => { name, surname };

Чтобы показать, что это не тело функции, а объект, добавим ()

const arrowFn = (name, surname) => ({ name, surname });
arrowFn('Иван','Иванов')  // {name: 'Иван', surname: 'Иванов'}

------------------------------------------------------------------
Обработка событий стрелочными функциями

const me = {
  name: 'Oksa',
  surname: 'Mir',
  // Функция-метод объекта, имеет fhis
  getFullName() {
      return `${this.name} ${this.surname}`;
  },
  // Аналогичная функция, но стрелочная
  getFullNameArr: () => `${this.name} ${this.surname}`,
};

console.log(me.getFullName());  // Oksa Mir
// console.log(me.getFullNameArr());  // undefined

Чтобы заработало, нужно в глобальной ОВ создать переменные и убрать this 

const me = {
  name: 'Oksa',
  surname: 'Mir',
  // Функция-метод объекта, имеет fhis
  getFullName() {
      return `${this.name} ${this.surname}`;
  },
  // Аналогичная функция, но стрелочная
  getFullNameArr: () => `${name} ${surname}`,
};

console.log(me.getFullName());  // Oksa Mir

let name = 'Oksa';
let surname = 'Mir';
console.log(me.getFullNameArr());  // Oksa Mir


-------------------------------------------
Когда какую использовать?

===== Обычная

1. Методы объектов

const obj = {
  name: 'Name',
  printName() {
    console.log(this.name);
    }   
};

2. Обработчики событий когда нужен именно this, нечастно

input.addEventListener('input', function() {
  console.log(this.value);
});

3. Простые именованные функции в скрипте, это наглядно

function newFunc() {
  // тело функции
}

===== Стрелочная

1. Обработчик событий

input.addEventListener('input', () {
  console.log('input event');
});

2. При передаче анонимной функции в качестве параметра в другую функцию

setInterval( () => {
  console.log('tick');
}, 1000)

3. Вызов сразу после объявления IIFE
(() => {})() // аналогично (function() {})()
