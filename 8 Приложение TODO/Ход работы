Создаем папку проекта TODO и внутри нее два файла index.html и main.js

https://itchief.ru/html-and-css/viewport-meta-tag
https://getbootstrap.com/docs/4.5/getting-started/introduction/#css

-----------------------------------------
Заполнили файл index.html каркасом

<!DOCTYPE html>
<html lang="ru">
    <head>
        <title>TODO</title>
        <meta charset="UTF-8">
        <!-- возможность открыть в любом устройстве, при любом раззрешении --> 
        <meta name="viewport" 
              content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link 
        link rel="stylesheet" 
        href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" 
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" 
        crossorigin="anonymous">
        <script defer src="./main.js"></script>
    </head>
    <body>
        <!-- класс для максимальной ширины страницы -->
        <div id="todo-app" class="container"></div>
    </body>

</html>

------------------------------------------
Создаем статическое оформление, чтобы было в чем обрабатывать события
Создадим общую безымянную функцию в main.js

(function() {   
    // создаем и возвращаем заголовок приложения
    function createAppTitle() {}

    // создаем и возвращаем форму для создания дела
    function createTodoItemForm() {}

    // создаем и возвращаем список элементов
    function createTodoList() {}
});

Начинаем наполнять функции

(function() {   
    // создаем и возвращаем заголовок приложения
    // поместим название в аргумент для легкости замены
    function createAppTitle(title) {    
        // в переменную помещаем DOM-элемент 
        let appTitle = document.createElement('h2');
        // помещаем значение аргумента в тег
        appTitle.innerHTML = title;
        // возврат обязателен, иначе езультат не вынуть
        return appTitle;
    }

    // создаем и возвращаем форму для создания дела
    function createTodoItemForm() {
        let form = document.createElement('form');
        let input = document.createElement('input');
        let button = document.createElement('button');
        let buttonWrapper = document.createElement('buttonWrapper');

        // дополним наши элементы атрибутами, присвоим классы и свойства
        // чтобы связать с заданными настрйоками из bootstrap
        form.classList.add('input-group', 'mb-3');
        input.classList.add('form-control');
        input.placeholder = 'Введите название нового дела';
        buttonWrapper.classList.add('input-group-append');
        button.classList.add('btn','btn-primary');
        button.textContent = 'Добавить дело';

        // объединяем элементы в единую структуру, вкладываем
        buttonWrapper.append(button);
        form.append(input);
        form.append(buttonWrapper);

        // как это выглядело бы в виде html
        // <form class='input-group', 'mb-3'>
        //    <input class='form-control' placeholder='Введите название нового дела'>
        //    <div class='input-group-append'>
        //        <button class='btn btn-primary'>Добавить дело</button>
        //    </div>
        // </form>
        
        return {form, 
            input,  // если не вернуть отдельно, неоткуда получить данные от юзера
            button,}
    }

    // создаем и возвращаем список элементов
    function createTodoList() {
        // помещаем в переменную список
        let list = document.createElement('ul');
        list.classList.add('list-group');
        return list;
    }
});

Продолжаем простраивать логику

// Поместим элементы в DOM страницы 
    // Создадим обработчик Loaded, чтобы получить доступ в DOM загрузив html
    document.addEventListener('DOMContentLoaded', function() {
        
        // создаем контейнер
        let container = document.getElementById('todo-app');
        
        // создаем переменные при помощи функций
        let todoAppTitle = createAppTitle('Список дел');
        let todoItemForm = createTodoItemForm();
        let todoList = createTodoList();
        
        // размещаем переменные в контейнере
        container.append(todoAppTitle);
        container.append(todoItemForm.form);
        container.append(todoList);

    });
    
Добавим приложению поведение (следующий урок 8.3)


    
