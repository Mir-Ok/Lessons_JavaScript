Задача 1: преобразование текста, введенного человеком (с потенциальными ошибками, 
пропусками пробелов и пр), разбор на части, перекомпоновка
------------------------------------------------------------------------------------

На входе

parseEmployeeData(`Тиунов Тимофей  Сергеевич,  системый архитектор
                   Иванов Иван Иванович , frontend-разработчик
                   `);
                   
                   
На выходе ждем объект с 4-мя свойствами

function parseEmployeeData(dataString) {
    return dataString
    // разбиваем текст на строки по переносу каретки
    .split('\n')
    // убираем пустые строки и строки с пробелами, оставляем только те, что после чистки все равно больше 0
    .filter(line => line.trim().length > 0)
    // начинаем преобразование строк
    .map(line => {
        // разбиваем строку на 2 части - полное имя и профессия
        const [fullName, occupation] = line
            // разбиваем строку по запятой
            .split(',')
            // убираем лишние пробелы (после и перед запятой)
            .map(str => str.trim())
            // снова чистим возможно пустые строки, которые могли появится из-за нескольких пробелов подряд
            .filter(text => text.length > 0);
        const [surname, name, middleName] = fullName
            // ФИО написаны через пробел, по нему и разбиваем
            .split(' ')
            // аналогично убираем лишнее
            .filter(text => text.length > 0)
        return {
            surname, name, middleName, occupation
        };
    })
}


function parseEmployeeData(dataString) {
    return dataString.split('\n').filter(line => line.trim().length > 0).map(line => {
        const [fullName, occupation] = line.split(',').map(str => str.trim()).filter(text => text.length > 0);
        const [surname, name, middleName] = fullName.split(' ').filter(text => text.length > 0)
        return {
            surname, name, middleName, occupation
        };
    })
}


Задача 2. Поиск всех ссылок на странице в браузере и возврат списка доменов
---------------------------------------------------------------------------

function getPageLinkDomains() {
    // Array.from создаст массив из массивоподобныйх структур, что вернет метод
    // это добавитт методы массива
    return Array.from(document.getElementsByTagName('a'))
        // доступен, потому что стал массивом
        .map(link => link.href
            // убираем лишнее
            .replace('http://', '')
            .replace('https:', '')
            .replace('www.','')
            // делим по слешу, чтобы взять именно домен
            .split('/')
            // забираем первый элемент
            .shift()
            )
        // теперь создаем новый массив уникальнх имен
        .reduce((unigueDomains, domain) => {
            // возвращаем входящий массив без изменений, если в нем уже есть этот домен
            if (unigueDomains.includes(domain)) return unigueDomains;
            // в противном случае добавлем к нему проверяемый доме
            return [...unigueDomains, domain]
            // стартуем с пустого массива
        }, []); 
}
