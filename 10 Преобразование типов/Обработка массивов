Преобразование массивов 
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array

const numbers = [0,1,2,3,4,5,6,7,8,9];

// вынет первый элемент и вернет его
const first = numbers.shift()
console.log(first)    // 0
console.log(numbers)  // [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]

// удалит последний с конца
const last = numbers.pop()
console.log(first)
console.log(last)

//удобно использовать в цикле while, true пока не пустой 
while (numbers.length) {
    // на каждоый итерации массив худеет
    console.log(`Удаляем ${numbers.pop()}`)
}

// вынуть из середины, с какого и сколько, исходный не изменится
// если взять слишком большйо первый аргумент - ничего не будет
// правый аргумент можно опустить
const middle = numbers.splice(4,2);
console.log(middle)  // [ 4,5 ]

// разрезать по индексу, убрать справа ничего и добавить
const middleAdd = numbers.splice(4,0,4,2);
console.log(middleAdd)  //  

// разрезать по индексу, правую чать получить в переменную
const part = numbers.splice(4);
console.log(part)  //  

// поворот массива задом наперед
numbers.reverse()

// сортировка
numbers.sort()
numbers.sort((a,b) => a - b); // если больше десяти
numbers.sort((a,b) => b - a);

// срезы, возможности начиная от копии и до всяких фигурных вырезов
numbers.slice()

// плюс все методы строк

Поиск элемента в объекте

Просто прямое сравнение не работает, потому что тип ссылочный.
Воспольщемся методом и критерий зададим как функцию

const students = [
    {name: "Vasya", age:17},
    {name: "Igor", age:25},
    {name: "Max", age:28},
]

students.find(student => student.name=="Vasya" && student.age==18)
// вернет сам объект студента, либо underfined
students.findIndex(student => student.name==="Vasya" && student.age===18)
// вернет индекс 0, либо -1

Для массивов простых чисел students.includes()

Проверить, все ли элементы соответствуют условию:
students.every(students => student.age > 20) // false

Проверить, ХОТЯ БЫ ОДИН элемент соответствуют условию:
students.some(students => student.age > 20) // false
 

---------------------
Фильтрация массива

const kids = students.filter(students => student.age < 20)
вернет [{name: "Vasya", age:17}]


---------------------
Преобразование элементов массива. Получает объект из списка и возвращает только один его атрибут

const students = [
    {name: "Vasya", age:17},
    {name: "Igor", age:25},
    {name: "Max", age:28},
]

students.map(student => student.name); // вернет Vasya, Igor, Max


----------------------
Расчеты с элемантами

const cartItems = [
    {name: "Греча", price:50, quality: 3},
    {name: "Рис", price:45, quality: 1},
    {name: "Пшено", price:100, quality: 2},
]

cartItems.reduce(
    //1-й аргумент функция, в нее подается уже накопленное значение
    (total, item) => total + item.price*item.quality, 
    //2-й аргумент начальное знаение
    0
);


---------------------
Перебор массива, укороченный вариант цикла

// первый аргумент функции очередной элемент, второй - индексу
students.forEach((student, index) => {
    console.log(`Студент №${index+1}: ${student.name}`);
});

// то же самое циклом
for (const index in students) {
    const student = student[index];
    console.log(`Студент №${index+1}: ${student.name}`);
}
