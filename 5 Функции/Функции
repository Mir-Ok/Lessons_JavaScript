Два способа создания
---------------------

1. Объявление с использованием function

function functionName() {
  // тело функции
  }
  
  
2. Присваиваем переменной функцию

let functionVariable = function () {
  // тело функции
  }
  
Важно!
Первый вариант можно вызвать до объявления функции, а второй - только после.
То есть если сейчас мы в самом верху добавим

functionName();
functionVariable();

то первая отработает, а вторая выдаст ошибку о вызове before assingment 
  
  
Аргументы функции
------------------
Это параметры, с кторыми работает функция

function great(who) {
  console.log(`Привет, ${who}`)
}
great('Петя');

Можно назначиьть значение по умолчанию

function great(who = 'Незнакомец') {
  console.log(`Привет, ${who}`)
}
great();


Аргументов может быть несколько, можно подать массив, конкретное значение или переменую
параметр расширения (...args) - https://learn.javascript.ru/rest-parameters-spread-operator

function findCard(cards, wantedCard = 'Туз') {
  console.log('Ищем карту ' + wantedCard);
  
  let found = false;
  
  for (let card of cards) {  // for of потому что ищем значение элемента
    console.log('Вытянули ' + card);  
    if (card === wantedCard) {
      found = true;
      break;
    }
  }
  
  console.log(found ? 
      `Мы нашли карту ${wantedCard}` : 
      `Нет в колоде карты ${wantedCard}`);
}

let myCards = ['2', 'Король', 'Туз', '5', '6', 'Король'];

findCard(myCards)  // вызываем с одним аргументом и умолчанием
findCard(myCards, '5')  // вызываем с обоими аргументами


Возвращаемое значение и undefined
---------------------------------
Перепишем функцию выше так, чтобы она возвращала не значение элемента, а индекс

function findCardIndex(cards, wantedCard = 'Туз') {
  console.log('Ищем карту ' + wantedCard);
  
  let foundIndex = -1;  // так обозначим несуществующую карту
  
  for (let index in cards) {  // for in потому что ищем индекс элемента
    let card = cards[index];
    console.log('Вытянули ' + card);  
    if (card === wantedCard) {
      foundIndex = index;
      break;
    }
  }
  
  console.log(foundIndex > -1 ? 
      `Мы нашли карту ${wantedCard}` : 
      `Нет в колоде карты ${wantedCard}`);
      
  return foundIndex;    
}

let myCards = ['2', 'Король', 'Туз', '5', '6', 'Король'];

let iceIndex  = findCardIndex(myCards)  // вызываем с одним аргументом и умолчанием
console.log(iceIndex);
let jackIndex = findCardIndex(myCards, '5')  // вызываем с обоими аргументами
console.log(jackIndex);
let lowIndex = findCardIndex(myCards, 'Валет')  // вызываем с обоими аргументами
console.log(lowIndex);

return может стоять в нескольких ветках одной функции

Если в переменную поместить функцию, которая ничего не возвращает, то в ней
окажется undefined, этому же аналогично значение переменной, в которую ничего не присвоили





---------------------------
Остаточные параметры (...)

Вызывать функцию можно с любым количеством аргументов независимо от того, как она была определена.

Например:

function sum(a, b) {
  return a + b;
}

alert( sum(1, 2, 3, 4, 5) );

Лишние аргументы не вызовут ошибку. Но, конечно, посчитаются только первые два.
Остаточные параметры могут быть обозначены через три точки .... 
Буквально это значит: «собери оставшиеся параметры и положи их в массив».

Например, соберём все аргументы в массив args:

function sumAll(...args) { // args — имя массива
  let sum = 0;

  for (let arg of args) sum += arg;

  return sum;
}

alert( sumAll(1) ); // 1
alert( sumAll(1, 2) ); // 3
alert( sumAll(1, 2, 3) ); // 6

--------------------------------------------
Оператор расширения

Мы узнали, как получить массив из списка параметров.
Но иногда нужно сделать в точности противоположное.
Например, есть встроенная функция Math.max. Она возвращает наибольшее число из списка:

alert( Math.max(3, 5, 1) ); // 5

Допустим, у нас есть массив чисел [3, 5, 1]. Как вызвать для него Math.max?
Просто так их не вставишь — Math.max ожидает получить список чисел, а не один массив.

let arr = [3, 5, 1];
alert( Math.max(arr) ); // NaN

Конечно, мы можем вводить числа вручную : Math.max(arr[0], arr[1], arr[2]). 
Но, во-первых, это плохо выглядит, а, во-вторых, мы не всегда знаем, сколько будет аргументов. 
Их может быть как очень много, так и не быть совсем.

И тут нам поможет оператор расширения. Он похож на остаточные параметры – тоже использует ..., 
но делает совершенно противоположное.

Когда ...arr используется при вызове функции, он «расширяет» перебираемый объект arr в список аргументов.

Для Math.max:

let arr = [3, 5, 1];
alert( Math.max(...arr) ); // 5 (оператор "раскрывает" массив в список аргументов)
