Откуда берется DOM?

1. Из html кода создается браузером перед загрузкой. Удобно для малодинамичных страниц
2. Из JS. Удобно для динамичных, меняются на лету без перезагрузки, считают и пр.

Дальше работаем в браузере, в пустой, созданной для этого странице empty.html
В консоли

document.createElement('div')
<div>​</div>​   // создает элемент, но никуда его не добавляет

Создадим заголовок
- document.createElement('div')
- let h1 = document.createElement('h1')
- h1.textContent = 'Список покупок'
- document.body.append(h1)

На пустой странице появился заголовок. Добавим пункты списка покупок
Метод append добавляет в конец, поэтому элементы страницы располагаются сверху вниз
Добавить в начало prepend

let ol = document.createElement('ol')  // добавили каркас списка
document.body.append(ol)               // присоединили к документу

let list = [                           // создали каркас для пунктов списка
    document.createElement('li'),
    document.createElement('li'),
    document.createElement('li'),]

list[0].textContent = "Цикрулярная пила"  // наполнили содержимым пункты каркаса
list[1].textContent = "Молоко"
list[2].textContent = "Хлеб"

ol.prepend(list[0])  // присоединили к документу
ol.prepend(list[1])
ol.prepend(list[2])

Вид сейчас:
Список покупок
1. Хлеб
2. Молоко
3. Цикрулярная пила

-------------------------------------
Добавление: before и after

Вспомнили, что хотим еще купить яйца

let eggs = document.createElement('li')  // создали пустой пункт списка
eggs.textContent = 'Яйца'                // наполнили текстом
list[1].before(eggs)                     // присоедини к списку в нужном месте

Добавим еще сосиски после яиц, после 2 элемента

let sausage = document.createElement('li')  // создали пустой пункт списка
sausage.textContent = 'Колбаса'             // наполнили текстом
list[2].after(sausage)                      // присоедини к списку в нужном месте

ВАЖНО! Объекты не копируются, а вызываются по ссылке, и если мы снова вызовем имеющийся
элемент - он переместится, не продублируется
