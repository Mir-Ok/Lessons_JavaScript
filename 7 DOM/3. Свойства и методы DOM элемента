Откуда берется DOM?

1. Из html кода создается браузером перед загрузкой. Удобно для малодинамичных страниц
2. Из JS. Удобно для динамичных, меняются на лету без перезагрузки, считают и пр.

Дальше работаем в браузере, в пустой, созданной для этого странице empty.html
В консоли

document.createElement('div')
<div>​</div>​   // создает элемент, но никуда его не добавляет

Создадим заголовок
- document.createElement('div')
- let h1 = document.createElement('h1')
- h1.textContent = 'Список покупок'
- document.body.append(h1)

На пустой странице появился заголовок. Добавим пункты списка покупок
Метод append добавляет в конец, поэтому элементы страницы располагаются сверху вниз
Добавить в начало prepend

let ol = document.createElement('ol')  // добавили каркас списка
document.body.append(ol)               // присоединили к документу

let list = [                           // создали каркас для пунктов списка
    document.createElement('li'),
    document.createElement('li'),
    document.createElement('li'),]

list[0].textContent = "Цикрулярная пила"  // наполнили содержимым пункты каркаса
list[1].textContent = "Молоко"
list[2].textContent = "Хлеб"

ol.prepend(list[0])  // присоединили к документу
ol.prepend(list[1])
ol.prepend(list[2])

Вид сейчас:
Список покупок
1. Хлеб
2. Молоко
3. Цикрулярная пила

-------------------------------------
Добавление: before и after

Вспомнили, что хотим еще купить яйца

let eggs = document.createElement('li')  // создали пустой пункт списка
eggs.textContent = 'Яйца'                // наполнили текстом
list[1].before(eggs)                     // присоедини к списку в нужном месте

Добавим еще сосиски после яиц, после 2 элемента

let sausage = document.createElement('li')  // создали пустой пункт списка
sausage.textContent = 'Колбаса'             // наполнили текстом
list[2].after(sausage)                      // присоедини к списку в нужном месте

ВАЖНО! Объекты не копируются, а вызываются по ссылке, и если мы снова вызовем имеющийся
элемент - он переместится, не продублируется


---------------------------------------
Изменение пункта replaceWith

Сначала создадим новый, потом подменим имеющийся

let breadBot = document.createElement('li')
breadBot.innerHTML = '<strike>Хлеб</strike>'
ol.children[0].replaceWith(breadBot)

Список покупок
1. Хлеб (зачеркнуто)
2. Колбаса
3. Яйца
4. Молоко
5. Цикрулярная пила


----------------------------------------
Удаление пункта меню

ol.children[4].remove()  // обратимся и вызовем метод удаления


----------------------------------------
Настройка внешнего вида

.innerHTML   // заменяет старый текст на новый (учитывает теги), старый безвозвратно теряется
.textContent // заменяет старый текст на новый (теги как ТЕКСТ), старый безвозвратно теряется, безопасно
                в случае заполнения пользователем
ol.id = 'qwe'      // добавили элементу идентификатор, отобразится в Elements 
ol.reversed = true // направляем нумерацию наоборот
ol.start = '20'    // с чего начинается список
ol.removeAttribute('start') // удаление атрибута


-----------------------------------------
Работа с классами

Для них предусмотрен отдельный атрибут classList

ol.classList.add('class1') // добавить класс
ol.classList.remove('class1') // удалить класс
ol.classList.toggle('class1') // переключить класс, удалить если есть и наоборот
ol.classList.contains('class1') // проверка наличия класса


------------------------------------------
Если мы работаем с уже имеющимся большим документом, просто перебирать родителей и детей неудобно
Метод querySelector (на примере главной страницы Яндекса)

document.getElementById('text') - ищем по id, оптимально (браузер не тратит время на разбор)
document.querySelector('#text') - ищем по id ПЕРВЫЙ попавшийся, который заранее подсмотрели через Elements 
document.querySelectorAll('.news_list') - ищем по классу ВСЕ элементы 
